/*
 * Moov ACH + Ledger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pps.sdk.moov.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.pps.sdk.moov.model.LedgerEntry;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * LedgerView
 */
@JsonPropertyOrder({
  LedgerView.JSON_PROPERTY_PAYMENT_ID,
  LedgerView.JSON_PROPERTY_ENTRIES,
  LedgerView.JSON_PROPERTY_BALANCED
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.6.0")
public class LedgerView {
  public static final String JSON_PROPERTY_PAYMENT_ID = "paymentId";
  private String paymentId;

  public static final String JSON_PROPERTY_ENTRIES = "entries";
  private List<LedgerEntry> entries = new ArrayList<>();

  public static final String JSON_PROPERTY_BALANCED = "balanced";
  private Boolean balanced;

  public LedgerView() {
  }

  public LedgerView paymentId(String paymentId) {
    
    this.paymentId = paymentId;
    return this;
  }

   /**
   * Get paymentId
   * @return paymentId
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PAYMENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPaymentId() {
    return paymentId;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPaymentId(String paymentId) {
    this.paymentId = paymentId;
  }

  public LedgerView entries(List<LedgerEntry> entries) {
    
    this.entries = entries;
    return this;
  }

  public LedgerView addEntriesItem(LedgerEntry entriesItem) {
    if (this.entries == null) {
      this.entries = new ArrayList<>();
    }
    this.entries.add(entriesItem);
    return this;
  }

   /**
   * Get entries
   * @return entries
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ENTRIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<LedgerEntry> getEntries() {
    return entries;
  }


  @JsonProperty(JSON_PROPERTY_ENTRIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEntries(List<LedgerEntry> entries) {
    this.entries = entries;
  }

  public LedgerView balanced(Boolean balanced) {
    
    this.balanced = balanced;
    return this;
  }

   /**
   * Get balanced
   * @return balanced
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BALANCED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getBalanced() {
    return balanced;
  }


  @JsonProperty(JSON_PROPERTY_BALANCED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBalanced(Boolean balanced) {
    this.balanced = balanced;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LedgerView ledgerView = (LedgerView) o;
    return Objects.equals(this.paymentId, ledgerView.paymentId) &&
        Objects.equals(this.entries, ledgerView.entries) &&
        Objects.equals(this.balanced, ledgerView.balanced);
  }

  @Override
  public int hashCode() {
    return Objects.hash(paymentId, entries, balanced);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LedgerView {\n");
    sb.append("    paymentId: ").append(toIndentedString(paymentId)).append("\n");
    sb.append("    entries: ").append(toIndentedString(entries)).append("\n");
    sb.append("    balanced: ").append(toIndentedString(balanced)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

