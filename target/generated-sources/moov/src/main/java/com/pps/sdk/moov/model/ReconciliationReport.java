/*
 * Moov ACH + Ledger API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pps.sdk.moov.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.pps.sdk.moov.model.ReconciliationMismatch;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ReconciliationReport
 */
@JsonPropertyOrder({
  ReconciliationReport.JSON_PROPERTY_AS_OF_DATE,
  ReconciliationReport.JSON_PROPERTY_MISMATCHES
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.6.0")
public class ReconciliationReport {
  public static final String JSON_PROPERTY_AS_OF_DATE = "asOfDate";
  private LocalDate asOfDate;

  public static final String JSON_PROPERTY_MISMATCHES = "mismatches";
  private List<ReconciliationMismatch> mismatches = new ArrayList<>();

  public ReconciliationReport() {
  }

  public ReconciliationReport asOfDate(LocalDate asOfDate) {
    
    this.asOfDate = asOfDate;
    return this;
  }

   /**
   * Get asOfDate
   * @return asOfDate
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AS_OF_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public LocalDate getAsOfDate() {
    return asOfDate;
  }


  @JsonProperty(JSON_PROPERTY_AS_OF_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAsOfDate(LocalDate asOfDate) {
    this.asOfDate = asOfDate;
  }

  public ReconciliationReport mismatches(List<ReconciliationMismatch> mismatches) {
    
    this.mismatches = mismatches;
    return this;
  }

  public ReconciliationReport addMismatchesItem(ReconciliationMismatch mismatchesItem) {
    if (this.mismatches == null) {
      this.mismatches = new ArrayList<>();
    }
    this.mismatches.add(mismatchesItem);
    return this;
  }

   /**
   * Get mismatches
   * @return mismatches
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MISMATCHES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ReconciliationMismatch> getMismatches() {
    return mismatches;
  }


  @JsonProperty(JSON_PROPERTY_MISMATCHES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMismatches(List<ReconciliationMismatch> mismatches) {
    this.mismatches = mismatches;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReconciliationReport reconciliationReport = (ReconciliationReport) o;
    return Objects.equals(this.asOfDate, reconciliationReport.asOfDate) &&
        Objects.equals(this.mismatches, reconciliationReport.mismatches);
  }

  @Override
  public int hashCode() {
    return Objects.hash(asOfDate, mismatches);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReconciliationReport {\n");
    sb.append("    asOfDate: ").append(toIndentedString(asOfDate)).append("\n");
    sb.append("    mismatches: ").append(toIndentedString(mismatches)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

